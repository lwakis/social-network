{"version":3,"sources":["utils/validators/validators.js","components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.jsx","components/login/Login.jsx"],"names":["required","value","maxLengthCreator","maxLength","length","module","exports","FormsControl","Element","input","meta","touched","error","props","hasError","className","styles","formControl","createField","placeholder","name","validators","component","text","validate","Input","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","type","style","formSummaryError","connect","state","isAuth","auth","login","to","formData","email","password","rememberMe"],"mappings":"wHAAA,oEAAO,IAAMA,EAAW,SAAAC,GACpB,IAAIA,EACJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,oBCLlCE,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,kICc5GC,IAVM,SAACC,GAAD,OAAa,YAAgD,IAA9CC,EAA6C,EAA7CA,MAA6C,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAWC,EAAW,gCACvEC,EAAWH,GAAWC,EAC5B,OACI,yBAAKG,UAAWC,IAAOC,YAAc,KAAOH,EAAWE,IAAOJ,MAAQ,KAClE,kBAACJ,EAAD,iBAAaC,EAAWI,IACvBC,GAAY,kCAAQF,EAAR,QAOlB,IAAMM,EAAc,SAACC,EAAaC,EAAMC,EAAYC,GAAhC,IAA2CT,EAA3C,uDAAmD,GAAIU,EAAvD,uDAA8D,GAA9D,OACvB,6BACI,kBAAC,IAAD,eAAOJ,YAAaA,EAAaC,KAAMA,EAChCI,SAAUH,EACVC,UAAWA,GACPT,IAJf,IAKQU,K,iCCvBZ,+FASME,EAAQlB,YAAa,SAqB3B,IAAMmB,EAAiBC,YAAU,CAACC,KAAM,SAAjBD,EAnBvB,YAA2C,IAAvBE,EAAsB,EAAtBA,aAAcjB,EAAQ,EAARA,MAC9B,OACI,6BACI,0BAAMkB,SAAUD,GACPX,YAAY,QAAS,QAAS,CAAClB,KAAWyB,GAC1CP,YAAY,WAAY,WAAY,CAAClB,KAAWyB,EAAO,CAACM,KAAM,aAC9Db,YAAY,KAAM,aAAc,CAAClB,KAAWyB,EAAO,CAACM,KAAM,YAAa,cAC1EnB,GAAS,yBAAKG,UAAWiB,IAAMC,kBAC5BrB,GAGL,6BACI,+CA8BLsB,uBAJS,SAACC,GAAD,MAAY,CAChCC,OAAQD,EAAME,KAAKD,UAGiB,CAACE,WAA1BJ,EArBf,SAAerB,GAKX,OAAIA,EAAMuB,OACC,kBAAC,IAAD,CAAUG,GAAI,aAIrB,6BACI,qCACA,kBAACb,EAAD,CAAgBI,SAXP,SAACU,GACd3B,EAAMyB,MAAME,EAASC,MAAOD,EAASE,SAAUF,EAASG","file":"static/js/7.d50c7e1c.chunk.js","sourcesContent":["export const required = value => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1ursK\",\"error\":\"FormsControls_error__ILQSY\",\"formSummaryError\":\"FormsControls_formSummaryError__2WdLa\"};","import React from 'react';\r\nimport styles from './FormsControls.module.css';\r\nimport {Field} from \"redux-form\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\n\r\nconst FormsControl = (Element) => ({input, meta: {touched, error}, ...props}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <Element {...input} {...props} />\r\n            {hasError && <span> {error} </span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FormsControl\r\n\r\nexport const createField = (placeholder, name, validators, component, props = {}, text = \"\") => (\r\n    <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>)\r\n","import React from 'react';\r\nimport style from \"./../common/FormsControls/FormsControls.module.css\"\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport FormsControl, {createField} from \"../common/FormsControls/FormsControls\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/authReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst Input = FormsControl(\"input\");\r\n\r\nfunction LoginForm({handleSubmit, error}) {\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                    {createField(\"Email\", \"email\", [required], Input)}\r\n                    {createField(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n                    {createField(null, \"rememberMe\", [required], Input, {type: \"checkbox\"}, \"remembe me\")}\r\n                { error && <div className={style.formSummaryError}>\r\n                    {error}\r\n                </div>\r\n                }\r\n                <div>\r\n                    <button>Login</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({form: 'login'})(LoginForm)\r\n\r\nfunction Login(props) {\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"} />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);"],"sourceRoot":""}