{"version":3,"sources":["utils/validators/validators.js","components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.jsx","components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.js","components/Dialogs/Message/Message.jsx","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["required","value","maxLengthCreator","maxLength","length","module","exports","FormsControl","Element","input","meta","touched","error","props","hasError","className","styles","formControl","createField","placeholder","name","validators","component","text","validate","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","to","React","connect","Message","s","dialog","message","DialogItem","path","id","active","Textarea","maxLength50","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","containerTextArea","Field","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElement","messages","m","dialogsItem","values","addMessageAction","newMessageBody","compose","dispatch","addMessageActionCreater"],"mappings":"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","file":"static/js/5.7d7767c4.chunk.js","sourcesContent":["export const required = value => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1ursK\",\"error\":\"FormsControls_error__ILQSY\",\"formSummaryError\":\"FormsControls_formSummaryError__2WdLa\"};","import React from 'react';\r\nimport styles from './FormsControls.module.css';\r\nimport {Field} from \"redux-form\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\n\r\nconst FormsControl = (Element) => ({input, meta: {touched, error}, ...props}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <Element {...input} {...props} />\r\n            {hasError && <span> {error} </span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FormsControl\r\n\r\nexport const createField = (placeholder, name, validators, component, props = {}, text = \"\") => (\r\n    <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>)\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__epeIs\",\"dialogsItem\":\"Dialogs_dialogsItem__2q8Vd\",\"dialog\":\"Dialogs_dialog__3scNe\",\"active\":\"Dialogs_active__1i5lj\",\"messages\":\"Dialogs_messages__2Dha5\",\"containerTextArea\":\"Dialogs_containerTextArea__3bMz3\"};","import {Redirect} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'} />\r\n            return (\r\n                <Component {...this.props}/>\r\n            );\r\n        }\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n\r\n}","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\n\r\nfunction Message(props) {\r\n    return (\r\n        <div className={s.dialog}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nfunction DialogItem(props) {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport FormsControl from \"../common/FormsControls/FormsControls\";\r\n\r\nconst Textarea = FormsControl(\"textarea\");\r\n\r\nfunction Dialogs(props) {\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map( d => <DialogItem name={d.name} key={d.id} id={d.id}/>);\r\n    let messagesElement = state.messages.map( m => <Message message={m.message} key={m.id}/>);\r\n\r\n    let addNewMessage = (values) => {\r\n        props.addMessageAction(values.newMessageBody);\r\n    }\r\n\r\n    if (!props.isAuth) return <Redirect to={'/login'} /> ;\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.dialogs}>\r\n                <div className={s.dialogsItem}>\r\n                    {dialogsElements}\r\n                </div>\r\n                <div className={s.messages}>\r\n                    {messagesElement}\r\n                </div>\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={s.containerTextArea}>\r\n                <Field component={Textarea}\r\n                       validate={[required, maxLength50]}\r\n                       name=\"newMessageBody\" placeholder=\"Enter your message\"/>\r\n            </div>\r\n            <div>\r\n                <button>Отправить</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({form: \"dialogAddMessageForm\"})(AddMessageForm)\r\n\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport dialogsReducer, {addMessageActionCreater} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addMessageAction: (newMessageBody) => {\r\n            dispatch(addMessageActionCreater(newMessageBody));\r\n            }\r\n    }\r\n};\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}